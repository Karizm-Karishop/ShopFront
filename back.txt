
// src/pages/Login.tsx
import { Link, useLocation, useNavigate } from 'react-router-dom';
import * as Yup from 'yup';
import { Formik, Field, ErrorMessage, Form } from 'formik';
import { useState, useEffect } from 'react';
import { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';
import { FaEnvelope, FaLock } from 'react-icons/fa';
import BeatLoader from 'react-spinners/BeatLoader';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { loginUser, initiateGoogleLogin, handleGoogleCallback } from '../redux/slices/LoginSlice';

function Login() {
  const [showPassword, setShowPassword] = useState(false);
  const { loading, error, message, needs2FA, user } = useSelector(
    (state: RootState) => state.loginIn
  );
  const dispatch: AppDispatch = useDispatch();
  const location = useLocation();
  const navigate = useNavigate();

  const handleRedirectBasedOnRole = (role: string) => {
    switch (role.toLowerCase()) {
      case 'artist':
        navigate('/dashboard');
        break;
      case 'admin':
        navigate('/admin');
        break;
      case 'client':
      default:
        navigate('/');
        break;
    }
  };

  useEffect(() => {
    // Redirect if already logged in
    if (user) {
      handleRedirectBasedOnRole(user.role);
    }

    // Handle Google OAuth callback
    const urlParams = new URLSearchParams(location.search);
    const code = urlParams.get('code');
    
    if (code) {
      dispatch(handleGoogleCallback(code))
        .unwrap()
        .then((response) => {
          handleRedirectBasedOnRole(response.data.user.role);
        })
        .catch((error) => {
          console.error('Google login error:', error);
        });
    }
  }, [dispatch, location, navigate, user]);

  const handleSubmit = (values: { email: string; password: string }) => {
    dispatch(loginUser(values))
      .unwrap()
      .then((response) => {
        if (response.data.user.is2FAEnabled) {
          navigate('/two-factor-auth');
        } else {
          handleRedirectBasedOnRole(response.data.user.role);
        }
      });
  };

  const handleGoogleLogin = () => {
    dispatch(initiateGoogleLogin());
  };

  const validationSchema = Yup.object().shape({
    email: Yup.string().email('Invalid email').required('Email is required'),
    password: Yup.string().required('Password is required'),
  });

  return (
    // ... rest of your existing Login component JSX remains the same
  );
}

export default Login;

// src/routes/AppRoutes.tsx
import { FunctionComponent } from "react";
import { Routes, Route, BrowserRouter } from "react-router-dom";
import { PrivateRoute } from '../components/auth/PrivateRoute';
// ... other imports remain the same

const AppRoutes: FunctionComponent = () => {
  return (
    <BrowserRouter>
      <Routes>
        {/* Public routes */}
        <Route element={<HomeLayout />}>
          <Route index path="/" element={<Home />} />
          <Route path="/shop" element={<Shop />} />
          <Route path="/login" element={<Login />} />
          <Route path="/signup" element={<SignUp />} />
          <Route path="/contact" element={<ContactForm />} />
          <Route path="/about" element={<Aboutus />} />
          <Route path="/forgot-password" element={<PasswordResetRequestForm />} />
          <Route path="/two-factor-auth" element={<TwoFactorAuth />} />
          <Route path="/change-password" element={<ConfirmToChangePassword />} />
          <Route path="/productDetails" element={<ProductDetails />} />
          <Route path="/cart" element={<Cart />} />
          <Route path="/checkout" element={
            <PrivateRoute element={<Checkout />} allowedRoles={['client']} />
          } />
          <Route path="/wishlist" element={<Wishlist />} />
        </Route>

        {/* Artist routes */}
        <Route element={
          <PrivateRoute element={<DashboardLayout />} allowedRoles={['artist']} />
        }>
          <Route index path="/dashboard" element={<ArtistDashHome />} />
          <Route path="/dashboard/product" element={<DisplayProduct />} />
          <Route path="/dashboard/product/add" element={<AddProducts />} />
          <Route path="/dashboard/product/all" element={<AllProducts />} />
          <Route path="/dashboard/orders/all" element={<OrdersTable />} />
          <Route path="/dashboard/shop/add" element={<AddShopForm />} />
          <Route path="/dashboard/shop/all" element={<MyShops />} />
          <Route path="/dashboard/category/add" element={<AddCategoryForm />} />
          <Route path="/dashboard/category/all" element={<AllCategories />} />
          <Route path="/dashboard/user/profile" element={<Profile />} />
          <Route path="/dashboard/books/add" element={<PostBook />} />
          <Route path="/dashboard/books/all" element={<AllBooks />} />
          <Route path="/dashboard/music/create" element={<AddMusicForm />} />
          <Route path="/dashboard/music/album/create" element={<AddAlbums />} />
          <Route path="/dashboard/music/album/all" element={<AllAlbums />} />
          <Route path="/dashboard/music/all" element={<AllMusicTable />} />
        </Route>

        {/* Admin routes */}
        <Route element={
          <PrivateRoute element={<AdminDashbordLayout />} allowedRoles={['admin']} />
        }>
          <Route index path="/admin" element={<AdminDashboardHome />} />
          <Route path="/admin/users/roles" element={<TableUserRole />} />
          <Route path="/admin/users/all" element={<UserManage />} />
          <Route path="/admin/shops/approval" element={<ShopApprovalTable />} />
          <Route path="/admin/category/add" element={<AdminAddCategoryForm />} />
          <Route path="/admin/category/all" element={<AdminAllCategories />} />
          <Route path="/admin/analytics/sales" element={<SalesAnalytics />} />
          <Route path="admin/transactions/history" element={<TransactionHistoryPage />} />
          <Route path="admin/notifications/manage" element={<ManageNotification />} />
          <Route path="admin/notifications/unread" element={<ManageUnread />} />
          <Route path="/admin/analytics/user-activity" element={<UserAnalytics/>} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
};

export default AppRoutes;

// src/utils/axios.ts
import axios from 'axios';

const api = axios.create({
  baseURL: import.meta.env.VITE_BASE_URL,
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;